// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cod.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cod_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cod_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cod_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cod_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cod_2eproto;
namespace cod_pb {
class ArrayValue;
struct ArrayValueDefaultTypeInternal;
extern ArrayValueDefaultTypeInternal _ArrayValue_default_instance_;
class Object;
struct ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Objects;
struct ObjectsDefaultTypeInternal;
extern ObjectsDefaultTypeInternal _Objects_default_instance_;
class Value;
struct ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
class Variable;
struct VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
class Variables;
struct VariablesDefaultTypeInternal;
extern VariablesDefaultTypeInternal _Variables_default_instance_;
}  // namespace cod_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::cod_pb::ArrayValue* Arena::CreateMaybeMessage<::cod_pb::ArrayValue>(Arena*);
template<> ::cod_pb::Object* Arena::CreateMaybeMessage<::cod_pb::Object>(Arena*);
template<> ::cod_pb::Objects* Arena::CreateMaybeMessage<::cod_pb::Objects>(Arena*);
template<> ::cod_pb::Value* Arena::CreateMaybeMessage<::cod_pb::Value>(Arena*);
template<> ::cod_pb::Variable* Arena::CreateMaybeMessage<::cod_pb::Variable>(Arena*);
template<> ::cod_pb::Variables* Arena::CreateMaybeMessage<::cod_pb::Variables>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cod_pb {

// ===================================================================

class Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cod_pb.Value) */ {
 public:
  inline Value() : Value(nullptr) {}
  ~Value() override;
  explicit PROTOBUF_CONSTEXPR Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Value& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kValueInt = 1,
    kValueFloat = 2,
    kValueString = 3,
    VALUE_NOT_SET = 0,
  };

  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Value& from) {
    Value::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cod_pb.Value";
  }
  protected:
  explicit Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueIntFieldNumber = 1,
    kValueFloatFieldNumber = 2,
    kValueStringFieldNumber = 3,
  };
  // int32 value_int = 1;
  bool has_value_int() const;
  private:
  bool _internal_has_value_int() const;
  public:
  void clear_value_int();
  int32_t value_int() const;
  void set_value_int(int32_t value);
  private:
  int32_t _internal_value_int() const;
  void _internal_set_value_int(int32_t value);
  public:

  // float value_float = 2;
  bool has_value_float() const;
  private:
  bool _internal_has_value_float() const;
  public:
  void clear_value_float();
  float value_float() const;
  void set_value_float(float value);
  private:
  float _internal_value_float() const;
  void _internal_set_value_float(float value);
  public:

  // string value_string = 3;
  bool has_value_string() const;
  private:
  bool _internal_has_value_string() const;
  public:
  void clear_value_string();
  const std::string& value_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_string();
  PROTOBUF_NODISCARD std::string* release_value_string();
  void set_allocated_value_string(std::string* value_string);
  private:
  const std::string& _internal_value_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_string(const std::string& value);
  std::string* _internal_mutable_value_string();
  public:

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:cod_pb.Value)
 private:
  class _Internal;
  void set_has_value_int();
  void set_has_value_float();
  void set_has_value_string();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t value_int_;
      float value_float_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_string_;
    } Value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cod_2eproto;
};
// -------------------------------------------------------------------

class ArrayValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cod_pb.ArrayValue) */ {
 public:
  inline ArrayValue() : ArrayValue(nullptr) {}
  ~ArrayValue() override;
  explicit PROTOBUF_CONSTEXPR ArrayValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayValue(const ArrayValue& from);
  ArrayValue(ArrayValue&& from) noexcept
    : ArrayValue() {
    *this = ::std::move(from);
  }

  inline ArrayValue& operator=(const ArrayValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayValue& operator=(ArrayValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArrayValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayValue* internal_default_instance() {
    return reinterpret_cast<const ArrayValue*>(
               &_ArrayValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArrayValue& a, ArrayValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArrayValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArrayValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArrayValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArrayValue& from) {
    ArrayValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cod_pb.ArrayValue";
  }
  protected:
  explicit ArrayValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .cod_pb.Value value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::cod_pb::Value* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Value >*
      mutable_value();
  private:
  const ::cod_pb::Value& _internal_value(int index) const;
  ::cod_pb::Value* _internal_add_value();
  public:
  const ::cod_pb::Value& value(int index) const;
  ::cod_pb::Value* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Value >&
      value() const;

  // @@protoc_insertion_point(class_scope:cod_pb.ArrayValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Value > value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cod_2eproto;
};
// -------------------------------------------------------------------

class Variable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cod_pb.Variable) */ {
 public:
  inline Variable() : Variable(nullptr) {}
  ~Variable() override;
  explicit PROTOBUF_CONSTEXPR Variable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Variable(const Variable& from);
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variable& operator=(Variable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Variable& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kValueInt = 2,
    kValueFloat = 3,
    kValueString = 4,
    kValueArray = 5,
    VALUE_NOT_SET = 0,
  };

  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }
  inline void Swap(Variable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Variable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Variable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Variable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Variable& from) {
    Variable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cod_pb.Variable";
  }
  protected:
  explicit Variable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueIntFieldNumber = 2,
    kValueFloatFieldNumber = 3,
    kValueStringFieldNumber = 4,
    kValueArrayFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 value_int = 2;
  bool has_value_int() const;
  private:
  bool _internal_has_value_int() const;
  public:
  void clear_value_int();
  int32_t value_int() const;
  void set_value_int(int32_t value);
  private:
  int32_t _internal_value_int() const;
  void _internal_set_value_int(int32_t value);
  public:

  // float value_float = 3;
  bool has_value_float() const;
  private:
  bool _internal_has_value_float() const;
  public:
  void clear_value_float();
  float value_float() const;
  void set_value_float(float value);
  private:
  float _internal_value_float() const;
  void _internal_set_value_float(float value);
  public:

  // string value_string = 4;
  bool has_value_string() const;
  private:
  bool _internal_has_value_string() const;
  public:
  void clear_value_string();
  const std::string& value_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_string();
  PROTOBUF_NODISCARD std::string* release_value_string();
  void set_allocated_value_string(std::string* value_string);
  private:
  const std::string& _internal_value_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_string(const std::string& value);
  std::string* _internal_mutable_value_string();
  public:

  // .cod_pb.ArrayValue value_array = 5;
  bool has_value_array() const;
  private:
  bool _internal_has_value_array() const;
  public:
  void clear_value_array();
  const ::cod_pb::ArrayValue& value_array() const;
  PROTOBUF_NODISCARD ::cod_pb::ArrayValue* release_value_array();
  ::cod_pb::ArrayValue* mutable_value_array();
  void set_allocated_value_array(::cod_pb::ArrayValue* value_array);
  private:
  const ::cod_pb::ArrayValue& _internal_value_array() const;
  ::cod_pb::ArrayValue* _internal_mutable_value_array();
  public:
  void unsafe_arena_set_allocated_value_array(
      ::cod_pb::ArrayValue* value_array);
  ::cod_pb::ArrayValue* unsafe_arena_release_value_array();

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:cod_pb.Variable)
 private:
  class _Internal;
  void set_has_value_int();
  void set_has_value_float();
  void set_has_value_string();
  void set_has_value_array();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t value_int_;
      float value_float_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_string_;
      ::cod_pb::ArrayValue* value_array_;
    } Value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cod_2eproto;
};
// -------------------------------------------------------------------

class Variables final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cod_pb.Variables) */ {
 public:
  inline Variables() : Variables(nullptr) {}
  ~Variables() override;
  explicit PROTOBUF_CONSTEXPR Variables(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Variables(const Variables& from);
  Variables(Variables&& from) noexcept
    : Variables() {
    *this = ::std::move(from);
  }

  inline Variables& operator=(const Variables& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variables& operator=(Variables&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Variables& default_instance() {
    return *internal_default_instance();
  }
  static inline const Variables* internal_default_instance() {
    return reinterpret_cast<const Variables*>(
               &_Variables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Variables& a, Variables& b) {
    a.Swap(&b);
  }
  inline void Swap(Variables* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variables* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Variables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Variables>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Variables& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Variables& from) {
    Variables::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variables* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cod_pb.Variables";
  }
  protected:
  explicit Variables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableFieldNumber = 1,
  };
  // repeated .cod_pb.Variable variable = 1;
  int variable_size() const;
  private:
  int _internal_variable_size() const;
  public:
  void clear_variable();
  ::cod_pb::Variable* mutable_variable(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Variable >*
      mutable_variable();
  private:
  const ::cod_pb::Variable& _internal_variable(int index) const;
  ::cod_pb::Variable* _internal_add_variable();
  public:
  const ::cod_pb::Variable& variable(int index) const;
  ::cod_pb::Variable* add_variable();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Variable >&
      variable() const;

  // @@protoc_insertion_point(class_scope:cod_pb.Variables)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Variable > variable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cod_2eproto;
};
// -------------------------------------------------------------------

class Object final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cod_pb.Object) */ {
 public:
  inline Object() : Object(nullptr) {}
  ~Object() override;
  explicit PROTOBUF_CONSTEXPR Object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Object& default_instance() {
    return *internal_default_instance();
  }
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Object& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Object& from) {
    Object::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cod_pb.Object";
  }
  protected:
  explicit Object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 3,
    kNameFieldNumber = 1,
    kVariablesFieldNumber = 2,
  };
  // repeated .cod_pb.Object objects = 3;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::cod_pb::Object* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Object >*
      mutable_objects();
  private:
  const ::cod_pb::Object& _internal_objects(int index) const;
  ::cod_pb::Object* _internal_add_objects();
  public:
  const ::cod_pb::Object& objects(int index) const;
  ::cod_pb::Object* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Object >&
      objects() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .cod_pb.Variables variables = 2;
  bool has_variables() const;
  private:
  bool _internal_has_variables() const;
  public:
  void clear_variables();
  const ::cod_pb::Variables& variables() const;
  PROTOBUF_NODISCARD ::cod_pb::Variables* release_variables();
  ::cod_pb::Variables* mutable_variables();
  void set_allocated_variables(::cod_pb::Variables* variables);
  private:
  const ::cod_pb::Variables& _internal_variables() const;
  ::cod_pb::Variables* _internal_mutable_variables();
  public:
  void unsafe_arena_set_allocated_variables(
      ::cod_pb::Variables* variables);
  ::cod_pb::Variables* unsafe_arena_release_variables();

  // @@protoc_insertion_point(class_scope:cod_pb.Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Object > objects_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::cod_pb::Variables* variables_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cod_2eproto;
};
// -------------------------------------------------------------------

class Objects final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cod_pb.Objects) */ {
 public:
  inline Objects() : Objects(nullptr) {}
  ~Objects() override;
  explicit PROTOBUF_CONSTEXPR Objects(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Objects(const Objects& from);
  Objects(Objects&& from) noexcept
    : Objects() {
    *this = ::std::move(from);
  }

  inline Objects& operator=(const Objects& from) {
    CopyFrom(from);
    return *this;
  }
  inline Objects& operator=(Objects&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Objects& default_instance() {
    return *internal_default_instance();
  }
  static inline const Objects* internal_default_instance() {
    return reinterpret_cast<const Objects*>(
               &_Objects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Objects& a, Objects& b) {
    a.Swap(&b);
  }
  inline void Swap(Objects* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Objects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Objects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Objects>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Objects& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Objects& from) {
    Objects::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Objects* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cod_pb.Objects";
  }
  protected:
  explicit Objects(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 1,
  };
  // repeated .cod_pb.Object object = 1;
  int object_size() const;
  private:
  int _internal_object_size() const;
  public:
  void clear_object();
  ::cod_pb::Object* mutable_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Object >*
      mutable_object();
  private:
  const ::cod_pb::Object& _internal_object(int index) const;
  ::cod_pb::Object* _internal_add_object();
  public:
  const ::cod_pb::Object& object(int index) const;
  ::cod_pb::Object* add_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Object >&
      object() const;

  // @@protoc_insertion_point(class_scope:cod_pb.Objects)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Object > object_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cod_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Value

// int32 value_int = 1;
inline bool Value::_internal_has_value_int() const {
  return Value_case() == kValueInt;
}
inline bool Value::has_value_int() const {
  return _internal_has_value_int();
}
inline void Value::set_has_value_int() {
  _impl_._oneof_case_[0] = kValueInt;
}
inline void Value::clear_value_int() {
  if (_internal_has_value_int()) {
    _impl_.Value_.value_int_ = 0;
    clear_has_Value();
  }
}
inline int32_t Value::_internal_value_int() const {
  if (_internal_has_value_int()) {
    return _impl_.Value_.value_int_;
  }
  return 0;
}
inline void Value::_internal_set_value_int(int32_t value) {
  if (!_internal_has_value_int()) {
    clear_Value();
    set_has_value_int();
  }
  _impl_.Value_.value_int_ = value;
}
inline int32_t Value::value_int() const {
  // @@protoc_insertion_point(field_get:cod_pb.Value.value_int)
  return _internal_value_int();
}
inline void Value::set_value_int(int32_t value) {
  _internal_set_value_int(value);
  // @@protoc_insertion_point(field_set:cod_pb.Value.value_int)
}

// float value_float = 2;
inline bool Value::_internal_has_value_float() const {
  return Value_case() == kValueFloat;
}
inline bool Value::has_value_float() const {
  return _internal_has_value_float();
}
inline void Value::set_has_value_float() {
  _impl_._oneof_case_[0] = kValueFloat;
}
inline void Value::clear_value_float() {
  if (_internal_has_value_float()) {
    _impl_.Value_.value_float_ = 0;
    clear_has_Value();
  }
}
inline float Value::_internal_value_float() const {
  if (_internal_has_value_float()) {
    return _impl_.Value_.value_float_;
  }
  return 0;
}
inline void Value::_internal_set_value_float(float value) {
  if (!_internal_has_value_float()) {
    clear_Value();
    set_has_value_float();
  }
  _impl_.Value_.value_float_ = value;
}
inline float Value::value_float() const {
  // @@protoc_insertion_point(field_get:cod_pb.Value.value_float)
  return _internal_value_float();
}
inline void Value::set_value_float(float value) {
  _internal_set_value_float(value);
  // @@protoc_insertion_point(field_set:cod_pb.Value.value_float)
}

// string value_string = 3;
inline bool Value::_internal_has_value_string() const {
  return Value_case() == kValueString;
}
inline bool Value::has_value_string() const {
  return _internal_has_value_string();
}
inline void Value::set_has_value_string() {
  _impl_._oneof_case_[0] = kValueString;
}
inline void Value::clear_value_string() {
  if (_internal_has_value_string()) {
    _impl_.Value_.value_string_.Destroy();
    clear_has_Value();
  }
}
inline const std::string& Value::value_string() const {
  // @@protoc_insertion_point(field_get:cod_pb.Value.value_string)
  return _internal_value_string();
}
template <typename ArgT0, typename... ArgT>
inline void Value::set_value_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_value_string()) {
    clear_Value();
    set_has_value_string();
    _impl_.Value_.value_string_.InitDefault();
  }
  _impl_.Value_.value_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cod_pb.Value.value_string)
}
inline std::string* Value::mutable_value_string() {
  std::string* _s = _internal_mutable_value_string();
  // @@protoc_insertion_point(field_mutable:cod_pb.Value.value_string)
  return _s;
}
inline const std::string& Value::_internal_value_string() const {
  if (_internal_has_value_string()) {
    return _impl_.Value_.value_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_value_string(const std::string& value) {
  if (!_internal_has_value_string()) {
    clear_Value();
    set_has_value_string();
    _impl_.Value_.value_string_.InitDefault();
  }
  _impl_.Value_.value_string_.Set(value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_value_string() {
  if (!_internal_has_value_string()) {
    clear_Value();
    set_has_value_string();
    _impl_.Value_.value_string_.InitDefault();
  }
  return _impl_.Value_.value_string_.Mutable(      GetArenaForAllocation());
}
inline std::string* Value::release_value_string() {
  // @@protoc_insertion_point(field_release:cod_pb.Value.value_string)
  if (_internal_has_value_string()) {
    clear_has_Value();
    return _impl_.Value_.value_string_.Release();
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_value_string(std::string* value_string) {
  if (has_Value()) {
    clear_Value();
  }
  if (value_string != nullptr) {
    set_has_value_string();
    _impl_.Value_.value_string_.InitAllocated(value_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:cod_pb.Value.value_string)
}

inline bool Value::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void Value::clear_has_Value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Value::ValueCase Value::Value_case() const {
  return Value::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArrayValue

// repeated .cod_pb.Value value = 1;
inline int ArrayValue::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int ArrayValue::value_size() const {
  return _internal_value_size();
}
inline void ArrayValue::clear_value() {
  _impl_.value_.Clear();
}
inline ::cod_pb::Value* ArrayValue::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:cod_pb.ArrayValue.value)
  return _impl_.value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Value >*
ArrayValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:cod_pb.ArrayValue.value)
  return &_impl_.value_;
}
inline const ::cod_pb::Value& ArrayValue::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline const ::cod_pb::Value& ArrayValue::value(int index) const {
  // @@protoc_insertion_point(field_get:cod_pb.ArrayValue.value)
  return _internal_value(index);
}
inline ::cod_pb::Value* ArrayValue::_internal_add_value() {
  return _impl_.value_.Add();
}
inline ::cod_pb::Value* ArrayValue::add_value() {
  ::cod_pb::Value* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:cod_pb.ArrayValue.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Value >&
ArrayValue::value() const {
  // @@protoc_insertion_point(field_list:cod_pb.ArrayValue.value)
  return _impl_.value_;
}

// -------------------------------------------------------------------

// Variable

// string name = 1;
inline void Variable::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Variable::name() const {
  // @@protoc_insertion_point(field_get:cod_pb.Variable.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Variable::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cod_pb.Variable.name)
}
inline std::string* Variable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cod_pb.Variable.name)
  return _s;
}
inline const std::string& Variable::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Variable::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Variable::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Variable::release_name() {
  // @@protoc_insertion_point(field_release:cod_pb.Variable.name)
  return _impl_.name_.Release();
}
inline void Variable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cod_pb.Variable.name)
}

// int32 value_int = 2;
inline bool Variable::_internal_has_value_int() const {
  return Value_case() == kValueInt;
}
inline bool Variable::has_value_int() const {
  return _internal_has_value_int();
}
inline void Variable::set_has_value_int() {
  _impl_._oneof_case_[0] = kValueInt;
}
inline void Variable::clear_value_int() {
  if (_internal_has_value_int()) {
    _impl_.Value_.value_int_ = 0;
    clear_has_Value();
  }
}
inline int32_t Variable::_internal_value_int() const {
  if (_internal_has_value_int()) {
    return _impl_.Value_.value_int_;
  }
  return 0;
}
inline void Variable::_internal_set_value_int(int32_t value) {
  if (!_internal_has_value_int()) {
    clear_Value();
    set_has_value_int();
  }
  _impl_.Value_.value_int_ = value;
}
inline int32_t Variable::value_int() const {
  // @@protoc_insertion_point(field_get:cod_pb.Variable.value_int)
  return _internal_value_int();
}
inline void Variable::set_value_int(int32_t value) {
  _internal_set_value_int(value);
  // @@protoc_insertion_point(field_set:cod_pb.Variable.value_int)
}

// float value_float = 3;
inline bool Variable::_internal_has_value_float() const {
  return Value_case() == kValueFloat;
}
inline bool Variable::has_value_float() const {
  return _internal_has_value_float();
}
inline void Variable::set_has_value_float() {
  _impl_._oneof_case_[0] = kValueFloat;
}
inline void Variable::clear_value_float() {
  if (_internal_has_value_float()) {
    _impl_.Value_.value_float_ = 0;
    clear_has_Value();
  }
}
inline float Variable::_internal_value_float() const {
  if (_internal_has_value_float()) {
    return _impl_.Value_.value_float_;
  }
  return 0;
}
inline void Variable::_internal_set_value_float(float value) {
  if (!_internal_has_value_float()) {
    clear_Value();
    set_has_value_float();
  }
  _impl_.Value_.value_float_ = value;
}
inline float Variable::value_float() const {
  // @@protoc_insertion_point(field_get:cod_pb.Variable.value_float)
  return _internal_value_float();
}
inline void Variable::set_value_float(float value) {
  _internal_set_value_float(value);
  // @@protoc_insertion_point(field_set:cod_pb.Variable.value_float)
}

// string value_string = 4;
inline bool Variable::_internal_has_value_string() const {
  return Value_case() == kValueString;
}
inline bool Variable::has_value_string() const {
  return _internal_has_value_string();
}
inline void Variable::set_has_value_string() {
  _impl_._oneof_case_[0] = kValueString;
}
inline void Variable::clear_value_string() {
  if (_internal_has_value_string()) {
    _impl_.Value_.value_string_.Destroy();
    clear_has_Value();
  }
}
inline const std::string& Variable::value_string() const {
  // @@protoc_insertion_point(field_get:cod_pb.Variable.value_string)
  return _internal_value_string();
}
template <typename ArgT0, typename... ArgT>
inline void Variable::set_value_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_value_string()) {
    clear_Value();
    set_has_value_string();
    _impl_.Value_.value_string_.InitDefault();
  }
  _impl_.Value_.value_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cod_pb.Variable.value_string)
}
inline std::string* Variable::mutable_value_string() {
  std::string* _s = _internal_mutable_value_string();
  // @@protoc_insertion_point(field_mutable:cod_pb.Variable.value_string)
  return _s;
}
inline const std::string& Variable::_internal_value_string() const {
  if (_internal_has_value_string()) {
    return _impl_.Value_.value_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Variable::_internal_set_value_string(const std::string& value) {
  if (!_internal_has_value_string()) {
    clear_Value();
    set_has_value_string();
    _impl_.Value_.value_string_.InitDefault();
  }
  _impl_.Value_.value_string_.Set(value, GetArenaForAllocation());
}
inline std::string* Variable::_internal_mutable_value_string() {
  if (!_internal_has_value_string()) {
    clear_Value();
    set_has_value_string();
    _impl_.Value_.value_string_.InitDefault();
  }
  return _impl_.Value_.value_string_.Mutable(      GetArenaForAllocation());
}
inline std::string* Variable::release_value_string() {
  // @@protoc_insertion_point(field_release:cod_pb.Variable.value_string)
  if (_internal_has_value_string()) {
    clear_has_Value();
    return _impl_.Value_.value_string_.Release();
  } else {
    return nullptr;
  }
}
inline void Variable::set_allocated_value_string(std::string* value_string) {
  if (has_Value()) {
    clear_Value();
  }
  if (value_string != nullptr) {
    set_has_value_string();
    _impl_.Value_.value_string_.InitAllocated(value_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:cod_pb.Variable.value_string)
}

// .cod_pb.ArrayValue value_array = 5;
inline bool Variable::_internal_has_value_array() const {
  return Value_case() == kValueArray;
}
inline bool Variable::has_value_array() const {
  return _internal_has_value_array();
}
inline void Variable::set_has_value_array() {
  _impl_._oneof_case_[0] = kValueArray;
}
inline void Variable::clear_value_array() {
  if (_internal_has_value_array()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.value_array_;
    }
    clear_has_Value();
  }
}
inline ::cod_pb::ArrayValue* Variable::release_value_array() {
  // @@protoc_insertion_point(field_release:cod_pb.Variable.value_array)
  if (_internal_has_value_array()) {
    clear_has_Value();
    ::cod_pb::ArrayValue* temp = _impl_.Value_.value_array_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.value_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cod_pb::ArrayValue& Variable::_internal_value_array() const {
  return _internal_has_value_array()
      ? *_impl_.Value_.value_array_
      : reinterpret_cast< ::cod_pb::ArrayValue&>(::cod_pb::_ArrayValue_default_instance_);
}
inline const ::cod_pb::ArrayValue& Variable::value_array() const {
  // @@protoc_insertion_point(field_get:cod_pb.Variable.value_array)
  return _internal_value_array();
}
inline ::cod_pb::ArrayValue* Variable::unsafe_arena_release_value_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cod_pb.Variable.value_array)
  if (_internal_has_value_array()) {
    clear_has_Value();
    ::cod_pb::ArrayValue* temp = _impl_.Value_.value_array_;
    _impl_.Value_.value_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Variable::unsafe_arena_set_allocated_value_array(::cod_pb::ArrayValue* value_array) {
  clear_Value();
  if (value_array) {
    set_has_value_array();
    _impl_.Value_.value_array_ = value_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cod_pb.Variable.value_array)
}
inline ::cod_pb::ArrayValue* Variable::_internal_mutable_value_array() {
  if (!_internal_has_value_array()) {
    clear_Value();
    set_has_value_array();
    _impl_.Value_.value_array_ = CreateMaybeMessage< ::cod_pb::ArrayValue >(GetArenaForAllocation());
  }
  return _impl_.Value_.value_array_;
}
inline ::cod_pb::ArrayValue* Variable::mutable_value_array() {
  ::cod_pb::ArrayValue* _msg = _internal_mutable_value_array();
  // @@protoc_insertion_point(field_mutable:cod_pb.Variable.value_array)
  return _msg;
}

inline bool Variable::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void Variable::clear_has_Value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Variable::ValueCase Variable::Value_case() const {
  return Variable::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Variables

// repeated .cod_pb.Variable variable = 1;
inline int Variables::_internal_variable_size() const {
  return _impl_.variable_.size();
}
inline int Variables::variable_size() const {
  return _internal_variable_size();
}
inline void Variables::clear_variable() {
  _impl_.variable_.Clear();
}
inline ::cod_pb::Variable* Variables::mutable_variable(int index) {
  // @@protoc_insertion_point(field_mutable:cod_pb.Variables.variable)
  return _impl_.variable_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Variable >*
Variables::mutable_variable() {
  // @@protoc_insertion_point(field_mutable_list:cod_pb.Variables.variable)
  return &_impl_.variable_;
}
inline const ::cod_pb::Variable& Variables::_internal_variable(int index) const {
  return _impl_.variable_.Get(index);
}
inline const ::cod_pb::Variable& Variables::variable(int index) const {
  // @@protoc_insertion_point(field_get:cod_pb.Variables.variable)
  return _internal_variable(index);
}
inline ::cod_pb::Variable* Variables::_internal_add_variable() {
  return _impl_.variable_.Add();
}
inline ::cod_pb::Variable* Variables::add_variable() {
  ::cod_pb::Variable* _add = _internal_add_variable();
  // @@protoc_insertion_point(field_add:cod_pb.Variables.variable)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Variable >&
Variables::variable() const {
  // @@protoc_insertion_point(field_list:cod_pb.Variables.variable)
  return _impl_.variable_;
}

// -------------------------------------------------------------------

// Object

// string name = 1;
inline void Object::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Object::name() const {
  // @@protoc_insertion_point(field_get:cod_pb.Object.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Object::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cod_pb.Object.name)
}
inline std::string* Object::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cod_pb.Object.name)
  return _s;
}
inline const std::string& Object::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Object::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Object::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Object::release_name() {
  // @@protoc_insertion_point(field_release:cod_pb.Object.name)
  return _impl_.name_.Release();
}
inline void Object::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cod_pb.Object.name)
}

// .cod_pb.Variables variables = 2;
inline bool Object::_internal_has_variables() const {
  return this != internal_default_instance() && _impl_.variables_ != nullptr;
}
inline bool Object::has_variables() const {
  return _internal_has_variables();
}
inline void Object::clear_variables() {
  if (GetArenaForAllocation() == nullptr && _impl_.variables_ != nullptr) {
    delete _impl_.variables_;
  }
  _impl_.variables_ = nullptr;
}
inline const ::cod_pb::Variables& Object::_internal_variables() const {
  const ::cod_pb::Variables* p = _impl_.variables_;
  return p != nullptr ? *p : reinterpret_cast<const ::cod_pb::Variables&>(
      ::cod_pb::_Variables_default_instance_);
}
inline const ::cod_pb::Variables& Object::variables() const {
  // @@protoc_insertion_point(field_get:cod_pb.Object.variables)
  return _internal_variables();
}
inline void Object::unsafe_arena_set_allocated_variables(
    ::cod_pb::Variables* variables) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.variables_);
  }
  _impl_.variables_ = variables;
  if (variables) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cod_pb.Object.variables)
}
inline ::cod_pb::Variables* Object::release_variables() {
  
  ::cod_pb::Variables* temp = _impl_.variables_;
  _impl_.variables_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cod_pb::Variables* Object::unsafe_arena_release_variables() {
  // @@protoc_insertion_point(field_release:cod_pb.Object.variables)
  
  ::cod_pb::Variables* temp = _impl_.variables_;
  _impl_.variables_ = nullptr;
  return temp;
}
inline ::cod_pb::Variables* Object::_internal_mutable_variables() {
  
  if (_impl_.variables_ == nullptr) {
    auto* p = CreateMaybeMessage<::cod_pb::Variables>(GetArenaForAllocation());
    _impl_.variables_ = p;
  }
  return _impl_.variables_;
}
inline ::cod_pb::Variables* Object::mutable_variables() {
  ::cod_pb::Variables* _msg = _internal_mutable_variables();
  // @@protoc_insertion_point(field_mutable:cod_pb.Object.variables)
  return _msg;
}
inline void Object::set_allocated_variables(::cod_pb::Variables* variables) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.variables_;
  }
  if (variables) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(variables);
    if (message_arena != submessage_arena) {
      variables = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variables, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.variables_ = variables;
  // @@protoc_insertion_point(field_set_allocated:cod_pb.Object.variables)
}

// repeated .cod_pb.Object objects = 3;
inline int Object::_internal_objects_size() const {
  return _impl_.objects_.size();
}
inline int Object::objects_size() const {
  return _internal_objects_size();
}
inline void Object::clear_objects() {
  _impl_.objects_.Clear();
}
inline ::cod_pb::Object* Object::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:cod_pb.Object.objects)
  return _impl_.objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Object >*
Object::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:cod_pb.Object.objects)
  return &_impl_.objects_;
}
inline const ::cod_pb::Object& Object::_internal_objects(int index) const {
  return _impl_.objects_.Get(index);
}
inline const ::cod_pb::Object& Object::objects(int index) const {
  // @@protoc_insertion_point(field_get:cod_pb.Object.objects)
  return _internal_objects(index);
}
inline ::cod_pb::Object* Object::_internal_add_objects() {
  return _impl_.objects_.Add();
}
inline ::cod_pb::Object* Object::add_objects() {
  ::cod_pb::Object* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:cod_pb.Object.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Object >&
Object::objects() const {
  // @@protoc_insertion_point(field_list:cod_pb.Object.objects)
  return _impl_.objects_;
}

// -------------------------------------------------------------------

// Objects

// repeated .cod_pb.Object object = 1;
inline int Objects::_internal_object_size() const {
  return _impl_.object_.size();
}
inline int Objects::object_size() const {
  return _internal_object_size();
}
inline void Objects::clear_object() {
  _impl_.object_.Clear();
}
inline ::cod_pb::Object* Objects::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:cod_pb.Objects.object)
  return _impl_.object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Object >*
Objects::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:cod_pb.Objects.object)
  return &_impl_.object_;
}
inline const ::cod_pb::Object& Objects::_internal_object(int index) const {
  return _impl_.object_.Get(index);
}
inline const ::cod_pb::Object& Objects::object(int index) const {
  // @@protoc_insertion_point(field_get:cod_pb.Objects.object)
  return _internal_object(index);
}
inline ::cod_pb::Object* Objects::_internal_add_object() {
  return _impl_.object_.Add();
}
inline ::cod_pb::Object* Objects::add_object() {
  ::cod_pb::Object* _add = _internal_add_object();
  // @@protoc_insertion_point(field_add:cod_pb.Objects.object)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cod_pb::Object >&
Objects::object() const {
  // @@protoc_insertion_point(field_list:cod_pb.Objects.object)
  return _impl_.object_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cod_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cod_2eproto
