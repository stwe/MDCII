// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cod.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_cod_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cod_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cod_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cod_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_cod_2eproto;
namespace cod_pb {
class ArrayValue;
struct ArrayValueDefaultTypeInternal;
extern ArrayValueDefaultTypeInternal _ArrayValue_default_instance_;
class Object;
struct ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Objects;
struct ObjectsDefaultTypeInternal;
extern ObjectsDefaultTypeInternal _Objects_default_instance_;
class Value;
struct ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
class Variable;
struct VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
class Variables;
struct VariablesDefaultTypeInternal;
extern VariablesDefaultTypeInternal _Variables_default_instance_;
}  // namespace cod_pb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cod_pb {

// ===================================================================


// -------------------------------------------------------------------

class Value final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cod_pb.Value) */ {
 public:
  inline Value() : Value(nullptr) {}
  ~Value() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Value(::google::protobuf::internal::ConstantInitialized);

  inline Value(const Value& from)
      : Value(nullptr, from) {}
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Value& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kValueInt = 1,
    kValueFloat = 2,
    kValueString = 3,
    VALUE_NOT_SET = 0,
  };

  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Value* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Value& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Value& from) {
    Value::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Value* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cod_pb.Value";
  }
  protected:
  explicit Value(::google::protobuf::Arena* arena);
  Value(::google::protobuf::Arena* arena, const Value& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueIntFieldNumber = 1,
    kValueFloatFieldNumber = 2,
    kValueStringFieldNumber = 3,
  };
  // int32 value_int = 1;
  bool has_value_int() const;
  void clear_value_int() ;
  ::int32_t value_int() const;
  void set_value_int(::int32_t value);

  private:
  ::int32_t _internal_value_int() const;
  void _internal_set_value_int(::int32_t value);

  public:
  // float value_float = 2;
  bool has_value_float() const;
  void clear_value_float() ;
  float value_float() const;
  void set_value_float(float value);

  private:
  float _internal_value_float() const;
  void _internal_set_value_float(float value);

  public:
  // string value_string = 3;
  bool has_value_string() const;
  void clear_value_string() ;
  const std::string& value_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value_string(Arg_&& arg, Args_... args);
  std::string* mutable_value_string();
  PROTOBUF_NODISCARD std::string* release_value_string();
  void set_allocated_value_string(std::string* value);

  private:
  const std::string& _internal_value_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_string(
      const std::string& value);
  std::string* _internal_mutable_value_string();

  public:
  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:cod_pb.Value)
 private:
  class _Internal;
  void set_has_value_int();
  void set_has_value_float();
  void set_has_value_string();

  inline bool has_Value() const;
  inline void clear_has_Value();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 0,
      33, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t value_int_;
      float value_float_;
      ::google::protobuf::internal::ArenaStringPtr value_string_;
    } Value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cod_2eproto;
};// -------------------------------------------------------------------

class ArrayValue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cod_pb.ArrayValue) */ {
 public:
  inline ArrayValue() : ArrayValue(nullptr) {}
  ~ArrayValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ArrayValue(::google::protobuf::internal::ConstantInitialized);

  inline ArrayValue(const ArrayValue& from)
      : ArrayValue(nullptr, from) {}
  ArrayValue(ArrayValue&& from) noexcept
    : ArrayValue() {
    *this = ::std::move(from);
  }

  inline ArrayValue& operator=(const ArrayValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayValue& operator=(ArrayValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArrayValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayValue* internal_default_instance() {
    return reinterpret_cast<const ArrayValue*>(
               &_ArrayValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArrayValue& a, ArrayValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArrayValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArrayValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ArrayValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ArrayValue& from) {
    ArrayValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ArrayValue* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cod_pb.ArrayValue";
  }
  protected:
  explicit ArrayValue(::google::protobuf::Arena* arena);
  ArrayValue(::google::protobuf::Arena* arena, const ArrayValue& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .cod_pb.Value value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;

  public:
  void clear_value() ;
  ::cod_pb::Value* mutable_value(int index);
  ::google::protobuf::RepeatedPtrField< ::cod_pb::Value >*
      mutable_value();
  private:
  const ::google::protobuf::RepeatedPtrField<::cod_pb::Value>& _internal_value() const;
  ::google::protobuf::RepeatedPtrField<::cod_pb::Value>* _internal_mutable_value();
  public:
  const ::cod_pb::Value& value(int index) const;
  ::cod_pb::Value* add_value();
  const ::google::protobuf::RepeatedPtrField< ::cod_pb::Value >&
      value() const;
  // @@protoc_insertion_point(class_scope:cod_pb.ArrayValue)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::cod_pb::Value > value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cod_2eproto;
};// -------------------------------------------------------------------

class Variable final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cod_pb.Variable) */ {
 public:
  inline Variable() : Variable(nullptr) {}
  ~Variable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Variable(::google::protobuf::internal::ConstantInitialized);

  inline Variable(const Variable& from)
      : Variable(nullptr, from) {}
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variable& operator=(Variable&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Variable& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kValueInt = 2,
    kValueFloat = 3,
    kValueString = 4,
    kValueArray = 5,
    VALUE_NOT_SET = 0,
  };

  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }
  inline void Swap(Variable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Variable* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Variable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Variable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Variable& from) {
    Variable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Variable* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cod_pb.Variable";
  }
  protected:
  explicit Variable(::google::protobuf::Arena* arena);
  Variable(::google::protobuf::Arena* arena, const Variable& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueIntFieldNumber = 2,
    kValueFloatFieldNumber = 3,
    kValueStringFieldNumber = 4,
    kValueArrayFieldNumber = 5,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 value_int = 2;
  bool has_value_int() const;
  void clear_value_int() ;
  ::int32_t value_int() const;
  void set_value_int(::int32_t value);

  private:
  ::int32_t _internal_value_int() const;
  void _internal_set_value_int(::int32_t value);

  public:
  // float value_float = 3;
  bool has_value_float() const;
  void clear_value_float() ;
  float value_float() const;
  void set_value_float(float value);

  private:
  float _internal_value_float() const;
  void _internal_set_value_float(float value);

  public:
  // string value_string = 4;
  bool has_value_string() const;
  void clear_value_string() ;
  const std::string& value_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value_string(Arg_&& arg, Args_... args);
  std::string* mutable_value_string();
  PROTOBUF_NODISCARD std::string* release_value_string();
  void set_allocated_value_string(std::string* value);

  private:
  const std::string& _internal_value_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_string(
      const std::string& value);
  std::string* _internal_mutable_value_string();

  public:
  // .cod_pb.ArrayValue value_array = 5;
  bool has_value_array() const;
  private:
  bool _internal_has_value_array() const;

  public:
  void clear_value_array() ;
  const ::cod_pb::ArrayValue& value_array() const;
  PROTOBUF_NODISCARD ::cod_pb::ArrayValue* release_value_array();
  ::cod_pb::ArrayValue* mutable_value_array();
  void set_allocated_value_array(::cod_pb::ArrayValue* value);
  void unsafe_arena_set_allocated_value_array(::cod_pb::ArrayValue* value);
  ::cod_pb::ArrayValue* unsafe_arena_release_value_array();

  private:
  const ::cod_pb::ArrayValue& _internal_value_array() const;
  ::cod_pb::ArrayValue* _internal_mutable_value_array();

  public:
  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:cod_pb.Variable)
 private:
  class _Internal;
  void set_has_value_int();
  void set_has_value_float();
  void set_has_value_string();
  void set_has_value_array();

  inline bool has_Value() const;
  inline void clear_has_Value();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 1,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t value_int_;
      float value_float_;
      ::google::protobuf::internal::ArenaStringPtr value_string_;
      ::cod_pb::ArrayValue* value_array_;
    } Value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cod_2eproto;
};// -------------------------------------------------------------------

class Variables final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cod_pb.Variables) */ {
 public:
  inline Variables() : Variables(nullptr) {}
  ~Variables() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Variables(::google::protobuf::internal::ConstantInitialized);

  inline Variables(const Variables& from)
      : Variables(nullptr, from) {}
  Variables(Variables&& from) noexcept
    : Variables() {
    *this = ::std::move(from);
  }

  inline Variables& operator=(const Variables& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variables& operator=(Variables&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Variables& default_instance() {
    return *internal_default_instance();
  }
  static inline const Variables* internal_default_instance() {
    return reinterpret_cast<const Variables*>(
               &_Variables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Variables& a, Variables& b) {
    a.Swap(&b);
  }
  inline void Swap(Variables* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variables* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Variables* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Variables>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Variables& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Variables& from) {
    Variables::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Variables* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cod_pb.Variables";
  }
  protected:
  explicit Variables(::google::protobuf::Arena* arena);
  Variables(::google::protobuf::Arena* arena, const Variables& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableFieldNumber = 1,
  };
  // repeated .cod_pb.Variable variable = 1;
  int variable_size() const;
  private:
  int _internal_variable_size() const;

  public:
  void clear_variable() ;
  ::cod_pb::Variable* mutable_variable(int index);
  ::google::protobuf::RepeatedPtrField< ::cod_pb::Variable >*
      mutable_variable();
  private:
  const ::google::protobuf::RepeatedPtrField<::cod_pb::Variable>& _internal_variable() const;
  ::google::protobuf::RepeatedPtrField<::cod_pb::Variable>* _internal_mutable_variable();
  public:
  const ::cod_pb::Variable& variable(int index) const;
  ::cod_pb::Variable* add_variable();
  const ::google::protobuf::RepeatedPtrField< ::cod_pb::Variable >&
      variable() const;
  // @@protoc_insertion_point(class_scope:cod_pb.Variables)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::cod_pb::Variable > variable_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cod_2eproto;
};// -------------------------------------------------------------------

class Object final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cod_pb.Object) */ {
 public:
  inline Object() : Object(nullptr) {}
  ~Object() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Object(::google::protobuf::internal::ConstantInitialized);

  inline Object(const Object& from)
      : Object(nullptr, from) {}
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Object& default_instance() {
    return *internal_default_instance();
  }
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Object* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Object& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Object& from) {
    Object::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Object* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cod_pb.Object";
  }
  protected:
  explicit Object(::google::protobuf::Arena* arena);
  Object(::google::protobuf::Arena* arena, const Object& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 3,
    kNameFieldNumber = 1,
    kVariablesFieldNumber = 2,
  };
  // repeated .cod_pb.Object objects = 3;
  int objects_size() const;
  private:
  int _internal_objects_size() const;

  public:
  void clear_objects() ;
  ::cod_pb::Object* mutable_objects(int index);
  ::google::protobuf::RepeatedPtrField< ::cod_pb::Object >*
      mutable_objects();
  private:
  const ::google::protobuf::RepeatedPtrField<::cod_pb::Object>& _internal_objects() const;
  ::google::protobuf::RepeatedPtrField<::cod_pb::Object>* _internal_mutable_objects();
  public:
  const ::cod_pb::Object& objects(int index) const;
  ::cod_pb::Object* add_objects();
  const ::google::protobuf::RepeatedPtrField< ::cod_pb::Object >&
      objects() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .cod_pb.Variables variables = 2;
  bool has_variables() const;
  void clear_variables() ;
  const ::cod_pb::Variables& variables() const;
  PROTOBUF_NODISCARD ::cod_pb::Variables* release_variables();
  ::cod_pb::Variables* mutable_variables();
  void set_allocated_variables(::cod_pb::Variables* value);
  void unsafe_arena_set_allocated_variables(::cod_pb::Variables* value);
  ::cod_pb::Variables* unsafe_arena_release_variables();

  private:
  const ::cod_pb::Variables& _internal_variables() const;
  ::cod_pb::Variables* _internal_mutable_variables();

  public:
  // @@protoc_insertion_point(class_scope:cod_pb.Object)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      26, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::cod_pb::Object > objects_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::cod_pb::Variables* variables_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cod_2eproto;
};// -------------------------------------------------------------------

class Objects final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cod_pb.Objects) */ {
 public:
  inline Objects() : Objects(nullptr) {}
  ~Objects() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Objects(::google::protobuf::internal::ConstantInitialized);

  inline Objects(const Objects& from)
      : Objects(nullptr, from) {}
  Objects(Objects&& from) noexcept
    : Objects() {
    *this = ::std::move(from);
  }

  inline Objects& operator=(const Objects& from) {
    CopyFrom(from);
    return *this;
  }
  inline Objects& operator=(Objects&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Objects& default_instance() {
    return *internal_default_instance();
  }
  static inline const Objects* internal_default_instance() {
    return reinterpret_cast<const Objects*>(
               &_Objects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Objects& a, Objects& b) {
    a.Swap(&b);
  }
  inline void Swap(Objects* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Objects* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Objects* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Objects>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Objects& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Objects& from) {
    Objects::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Objects* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cod_pb.Objects";
  }
  protected:
  explicit Objects(::google::protobuf::Arena* arena);
  Objects(::google::protobuf::Arena* arena, const Objects& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 1,
  };
  // repeated .cod_pb.Object object = 1;
  int object_size() const;
  private:
  int _internal_object_size() const;

  public:
  void clear_object() ;
  ::cod_pb::Object* mutable_object(int index);
  ::google::protobuf::RepeatedPtrField< ::cod_pb::Object >*
      mutable_object();
  private:
  const ::google::protobuf::RepeatedPtrField<::cod_pb::Object>& _internal_object() const;
  ::google::protobuf::RepeatedPtrField<::cod_pb::Object>* _internal_mutable_object();
  public:
  const ::cod_pb::Object& object(int index) const;
  ::cod_pb::Object* add_object();
  const ::google::protobuf::RepeatedPtrField< ::cod_pb::Object >&
      object() const;
  // @@protoc_insertion_point(class_scope:cod_pb.Objects)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::cod_pb::Object > object_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cod_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Value

// int32 value_int = 1;
inline bool Value::has_value_int() const {
  return Value_case() == kValueInt;
}
inline void Value::set_has_value_int() {
  _impl_._oneof_case_[0] = kValueInt;
}
inline void Value::clear_value_int() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() == kValueInt) {
    _impl_.Value_.value_int_ = 0;
    clear_has_Value();
  }
}
inline ::int32_t Value::value_int() const {
  // @@protoc_insertion_point(field_get:cod_pb.Value.value_int)
  return _internal_value_int();
}
inline void Value::set_value_int(::int32_t value) {
  _internal_set_value_int(value);
  // @@protoc_insertion_point(field_set:cod_pb.Value.value_int)
}
inline ::int32_t Value::_internal_value_int() const {
  if (Value_case() == kValueInt) {
    return _impl_.Value_.value_int_;
  }
  return 0;
}
inline void Value::_internal_set_value_int(::int32_t value) {
  if (Value_case() != kValueInt) {
    clear_Value();
    set_has_value_int();
  }
  _impl_.Value_.value_int_ = value;
}

// float value_float = 2;
inline bool Value::has_value_float() const {
  return Value_case() == kValueFloat;
}
inline void Value::set_has_value_float() {
  _impl_._oneof_case_[0] = kValueFloat;
}
inline void Value::clear_value_float() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() == kValueFloat) {
    _impl_.Value_.value_float_ = 0;
    clear_has_Value();
  }
}
inline float Value::value_float() const {
  // @@protoc_insertion_point(field_get:cod_pb.Value.value_float)
  return _internal_value_float();
}
inline void Value::set_value_float(float value) {
  _internal_set_value_float(value);
  // @@protoc_insertion_point(field_set:cod_pb.Value.value_float)
}
inline float Value::_internal_value_float() const {
  if (Value_case() == kValueFloat) {
    return _impl_.Value_.value_float_;
  }
  return 0;
}
inline void Value::_internal_set_value_float(float value) {
  if (Value_case() != kValueFloat) {
    clear_Value();
    set_has_value_float();
  }
  _impl_.Value_.value_float_ = value;
}

// string value_string = 3;
inline bool Value::has_value_string() const {
  return Value_case() == kValueString;
}
inline void Value::set_has_value_string() {
  _impl_._oneof_case_[0] = kValueString;
}
inline void Value::clear_value_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() == kValueString) {
    _impl_.Value_.value_string_.Destroy();
    clear_has_Value();
  }
}
inline const std::string& Value::value_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cod_pb.Value.value_string)
  return _internal_value_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Value::set_value_string(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() != kValueString) {
    clear_Value();

    set_has_value_string();
    _impl_.Value_.value_string_.InitDefault();
  }
  _impl_.Value_.value_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cod_pb.Value.value_string)
}
inline std::string* Value::mutable_value_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value_string();
  // @@protoc_insertion_point(field_mutable:cod_pb.Value.value_string)
  return _s;
}
inline const std::string& Value::_internal_value_string() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (Value_case() != kValueString) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.Value_.value_string_.Get();
}
inline void Value::_internal_set_value_string(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() != kValueString) {
    clear_Value();

    set_has_value_string();
    _impl_.Value_.value_string_.InitDefault();
  }
  _impl_.Value_.value_string_.Set(value, GetArena());
}
inline std::string* Value::_internal_mutable_value_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() != kValueString) {
    clear_Value();

    set_has_value_string();
    _impl_.Value_.value_string_.InitDefault();
  }
  return _impl_.Value_.value_string_.Mutable( GetArena());
}
inline std::string* Value::release_value_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cod_pb.Value.value_string)
  if (Value_case() != kValueString) {
    return nullptr;
  }
  clear_has_Value();
  return _impl_.Value_.value_string_.Release();
}
inline void Value::set_allocated_value_string(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_Value()) {
    clear_Value();
  }
  if (value != nullptr) {
    set_has_value_string();
    _impl_.Value_.value_string_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cod_pb.Value.value_string)
}

inline bool Value::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void Value::clear_has_Value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Value::ValueCase Value::Value_case() const {
  return Value::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArrayValue

// repeated .cod_pb.Value value = 1;
inline int ArrayValue::_internal_value_size() const {
  return _internal_value().size();
}
inline int ArrayValue::value_size() const {
  return _internal_value_size();
}
inline void ArrayValue::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.Clear();
}
inline ::cod_pb::Value* ArrayValue::mutable_value(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cod_pb.ArrayValue.value)
  return _internal_mutable_value()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cod_pb::Value>* ArrayValue::mutable_value()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cod_pb.ArrayValue.value)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_value();
}
inline const ::cod_pb::Value& ArrayValue::value(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cod_pb.ArrayValue.value)
  return _internal_value().Get(index);
}
inline ::cod_pb::Value* ArrayValue::add_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::cod_pb::Value* _add = _internal_mutable_value()->Add();
  // @@protoc_insertion_point(field_add:cod_pb.ArrayValue.value)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cod_pb::Value>& ArrayValue::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cod_pb.ArrayValue.value)
  return _internal_value();
}
inline const ::google::protobuf::RepeatedPtrField<::cod_pb::Value>&
ArrayValue::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline ::google::protobuf::RepeatedPtrField<::cod_pb::Value>*
ArrayValue::_internal_mutable_value() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.value_;
}

// -------------------------------------------------------------------

// Variable

// string name = 1;
inline void Variable::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Variable::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cod_pb.Variable.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Variable::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cod_pb.Variable.name)
}
inline std::string* Variable::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cod_pb.Variable.name)
  return _s;
}
inline const std::string& Variable::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Variable::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Variable::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Variable::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cod_pb.Variable.name)
  return _impl_.name_.Release();
}
inline void Variable::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cod_pb.Variable.name)
}

// int32 value_int = 2;
inline bool Variable::has_value_int() const {
  return Value_case() == kValueInt;
}
inline void Variable::set_has_value_int() {
  _impl_._oneof_case_[0] = kValueInt;
}
inline void Variable::clear_value_int() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() == kValueInt) {
    _impl_.Value_.value_int_ = 0;
    clear_has_Value();
  }
}
inline ::int32_t Variable::value_int() const {
  // @@protoc_insertion_point(field_get:cod_pb.Variable.value_int)
  return _internal_value_int();
}
inline void Variable::set_value_int(::int32_t value) {
  _internal_set_value_int(value);
  // @@protoc_insertion_point(field_set:cod_pb.Variable.value_int)
}
inline ::int32_t Variable::_internal_value_int() const {
  if (Value_case() == kValueInt) {
    return _impl_.Value_.value_int_;
  }
  return 0;
}
inline void Variable::_internal_set_value_int(::int32_t value) {
  if (Value_case() != kValueInt) {
    clear_Value();
    set_has_value_int();
  }
  _impl_.Value_.value_int_ = value;
}

// float value_float = 3;
inline bool Variable::has_value_float() const {
  return Value_case() == kValueFloat;
}
inline void Variable::set_has_value_float() {
  _impl_._oneof_case_[0] = kValueFloat;
}
inline void Variable::clear_value_float() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() == kValueFloat) {
    _impl_.Value_.value_float_ = 0;
    clear_has_Value();
  }
}
inline float Variable::value_float() const {
  // @@protoc_insertion_point(field_get:cod_pb.Variable.value_float)
  return _internal_value_float();
}
inline void Variable::set_value_float(float value) {
  _internal_set_value_float(value);
  // @@protoc_insertion_point(field_set:cod_pb.Variable.value_float)
}
inline float Variable::_internal_value_float() const {
  if (Value_case() == kValueFloat) {
    return _impl_.Value_.value_float_;
  }
  return 0;
}
inline void Variable::_internal_set_value_float(float value) {
  if (Value_case() != kValueFloat) {
    clear_Value();
    set_has_value_float();
  }
  _impl_.Value_.value_float_ = value;
}

// string value_string = 4;
inline bool Variable::has_value_string() const {
  return Value_case() == kValueString;
}
inline void Variable::set_has_value_string() {
  _impl_._oneof_case_[0] = kValueString;
}
inline void Variable::clear_value_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() == kValueString) {
    _impl_.Value_.value_string_.Destroy();
    clear_has_Value();
  }
}
inline const std::string& Variable::value_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cod_pb.Variable.value_string)
  return _internal_value_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Variable::set_value_string(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() != kValueString) {
    clear_Value();

    set_has_value_string();
    _impl_.Value_.value_string_.InitDefault();
  }
  _impl_.Value_.value_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cod_pb.Variable.value_string)
}
inline std::string* Variable::mutable_value_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value_string();
  // @@protoc_insertion_point(field_mutable:cod_pb.Variable.value_string)
  return _s;
}
inline const std::string& Variable::_internal_value_string() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (Value_case() != kValueString) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.Value_.value_string_.Get();
}
inline void Variable::_internal_set_value_string(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() != kValueString) {
    clear_Value();

    set_has_value_string();
    _impl_.Value_.value_string_.InitDefault();
  }
  _impl_.Value_.value_string_.Set(value, GetArena());
}
inline std::string* Variable::_internal_mutable_value_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() != kValueString) {
    clear_Value();

    set_has_value_string();
    _impl_.Value_.value_string_.InitDefault();
  }
  return _impl_.Value_.value_string_.Mutable( GetArena());
}
inline std::string* Variable::release_value_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cod_pb.Variable.value_string)
  if (Value_case() != kValueString) {
    return nullptr;
  }
  clear_has_Value();
  return _impl_.Value_.value_string_.Release();
}
inline void Variable::set_allocated_value_string(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_Value()) {
    clear_Value();
  }
  if (value != nullptr) {
    set_has_value_string();
    _impl_.Value_.value_string_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:cod_pb.Variable.value_string)
}

// .cod_pb.ArrayValue value_array = 5;
inline bool Variable::has_value_array() const {
  return Value_case() == kValueArray;
}
inline bool Variable::_internal_has_value_array() const {
  return Value_case() == kValueArray;
}
inline void Variable::set_has_value_array() {
  _impl_._oneof_case_[0] = kValueArray;
}
inline void Variable::clear_value_array() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Value_case() == kValueArray) {
    if (GetArena() == nullptr) {
      delete _impl_.Value_.value_array_;
    }
    clear_has_Value();
  }
}
inline ::cod_pb::ArrayValue* Variable::release_value_array() {
  // @@protoc_insertion_point(field_release:cod_pb.Variable.value_array)
  if (Value_case() == kValueArray) {
    clear_has_Value();
    auto* temp = _impl_.Value_.value_array_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.value_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cod_pb::ArrayValue& Variable::_internal_value_array() const {
  return Value_case() == kValueArray ? *_impl_.Value_.value_array_ : reinterpret_cast<::cod_pb::ArrayValue&>(::cod_pb::_ArrayValue_default_instance_);
}
inline const ::cod_pb::ArrayValue& Variable::value_array() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cod_pb.Variable.value_array)
  return _internal_value_array();
}
inline ::cod_pb::ArrayValue* Variable::unsafe_arena_release_value_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cod_pb.Variable.value_array)
  if (Value_case() == kValueArray) {
    clear_has_Value();
    auto* temp = _impl_.Value_.value_array_;
    _impl_.Value_.value_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Variable::unsafe_arena_set_allocated_value_array(::cod_pb::ArrayValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_Value();
  if (value) {
    set_has_value_array();
    _impl_.Value_.value_array_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cod_pb.Variable.value_array)
}
inline ::cod_pb::ArrayValue* Variable::_internal_mutable_value_array() {
  if (Value_case() != kValueArray) {
    clear_Value();
    set_has_value_array();
    _impl_.Value_.value_array_ = CreateMaybeMessage<::cod_pb::ArrayValue>(GetArena());
  }
  return _impl_.Value_.value_array_;
}
inline ::cod_pb::ArrayValue* Variable::mutable_value_array() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cod_pb::ArrayValue* _msg = _internal_mutable_value_array();
  // @@protoc_insertion_point(field_mutable:cod_pb.Variable.value_array)
  return _msg;
}

inline bool Variable::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void Variable::clear_has_Value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Variable::ValueCase Variable::Value_case() const {
  return Variable::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Variables

// repeated .cod_pb.Variable variable = 1;
inline int Variables::_internal_variable_size() const {
  return _internal_variable().size();
}
inline int Variables::variable_size() const {
  return _internal_variable_size();
}
inline void Variables::clear_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variable_.Clear();
}
inline ::cod_pb::Variable* Variables::mutable_variable(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cod_pb.Variables.variable)
  return _internal_mutable_variable()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cod_pb::Variable>* Variables::mutable_variable()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cod_pb.Variables.variable)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variable();
}
inline const ::cod_pb::Variable& Variables::variable(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cod_pb.Variables.variable)
  return _internal_variable().Get(index);
}
inline ::cod_pb::Variable* Variables::add_variable() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::cod_pb::Variable* _add = _internal_mutable_variable()->Add();
  // @@protoc_insertion_point(field_add:cod_pb.Variables.variable)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cod_pb::Variable>& Variables::variable() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cod_pb.Variables.variable)
  return _internal_variable();
}
inline const ::google::protobuf::RepeatedPtrField<::cod_pb::Variable>&
Variables::_internal_variable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variable_;
}
inline ::google::protobuf::RepeatedPtrField<::cod_pb::Variable>*
Variables::_internal_mutable_variable() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variable_;
}

// -------------------------------------------------------------------

// Object

// string name = 1;
inline void Object::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Object::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cod_pb.Object.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Object::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:cod_pb.Object.name)
}
inline std::string* Object::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cod_pb.Object.name)
  return _s;
}
inline const std::string& Object::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Object::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Object::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Object::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cod_pb.Object.name)
  return _impl_.name_.Release();
}
inline void Object::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cod_pb.Object.name)
}

// .cod_pb.Variables variables = 2;
inline bool Object::has_variables() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.variables_ != nullptr);
  return value;
}
inline void Object::clear_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.variables_ != nullptr) _impl_.variables_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cod_pb::Variables& Object::_internal_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::cod_pb::Variables* p = _impl_.variables_;
  return p != nullptr ? *p : reinterpret_cast<const ::cod_pb::Variables&>(::cod_pb::_Variables_default_instance_);
}
inline const ::cod_pb::Variables& Object::variables() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cod_pb.Object.variables)
  return _internal_variables();
}
inline void Object::unsafe_arena_set_allocated_variables(::cod_pb::Variables* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.variables_);
  }
  _impl_.variables_ = reinterpret_cast<::cod_pb::Variables*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cod_pb.Object.variables)
}
inline ::cod_pb::Variables* Object::release_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cod_pb::Variables* released = _impl_.variables_;
  _impl_.variables_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::cod_pb::Variables* Object::unsafe_arena_release_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:cod_pb.Object.variables)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cod_pb::Variables* temp = _impl_.variables_;
  _impl_.variables_ = nullptr;
  return temp;
}
inline ::cod_pb::Variables* Object::_internal_mutable_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.variables_ == nullptr) {
    auto* p = CreateMaybeMessage<::cod_pb::Variables>(GetArena());
    _impl_.variables_ = reinterpret_cast<::cod_pb::Variables*>(p);
  }
  return _impl_.variables_;
}
inline ::cod_pb::Variables* Object::mutable_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cod_pb::Variables* _msg = _internal_mutable_variables();
  // @@protoc_insertion_point(field_mutable:cod_pb.Object.variables)
  return _msg;
}
inline void Object::set_allocated_variables(::cod_pb::Variables* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::cod_pb::Variables*>(_impl_.variables_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::cod_pb::Variables*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.variables_ = reinterpret_cast<::cod_pb::Variables*>(value);
  // @@protoc_insertion_point(field_set_allocated:cod_pb.Object.variables)
}

// repeated .cod_pb.Object objects = 3;
inline int Object::_internal_objects_size() const {
  return _internal_objects().size();
}
inline int Object::objects_size() const {
  return _internal_objects_size();
}
inline void Object::clear_objects() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objects_.Clear();
}
inline ::cod_pb::Object* Object::mutable_objects(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cod_pb.Object.objects)
  return _internal_mutable_objects()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cod_pb::Object>* Object::mutable_objects()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cod_pb.Object.objects)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_objects();
}
inline const ::cod_pb::Object& Object::objects(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cod_pb.Object.objects)
  return _internal_objects().Get(index);
}
inline ::cod_pb::Object* Object::add_objects() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::cod_pb::Object* _add = _internal_mutable_objects()->Add();
  // @@protoc_insertion_point(field_add:cod_pb.Object.objects)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cod_pb::Object>& Object::objects() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cod_pb.Object.objects)
  return _internal_objects();
}
inline const ::google::protobuf::RepeatedPtrField<::cod_pb::Object>&
Object::_internal_objects() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objects_;
}
inline ::google::protobuf::RepeatedPtrField<::cod_pb::Object>*
Object::_internal_mutable_objects() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.objects_;
}

// -------------------------------------------------------------------

// Objects

// repeated .cod_pb.Object object = 1;
inline int Objects::_internal_object_size() const {
  return _internal_object().size();
}
inline int Objects::object_size() const {
  return _internal_object_size();
}
inline void Objects::clear_object() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.object_.Clear();
}
inline ::cod_pb::Object* Objects::mutable_object(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:cod_pb.Objects.object)
  return _internal_mutable_object()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::cod_pb::Object>* Objects::mutable_object()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cod_pb.Objects.object)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_object();
}
inline const ::cod_pb::Object& Objects::object(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cod_pb.Objects.object)
  return _internal_object().Get(index);
}
inline ::cod_pb::Object* Objects::add_object() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::cod_pb::Object* _add = _internal_mutable_object()->Add();
  // @@protoc_insertion_point(field_add:cod_pb.Objects.object)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::cod_pb::Object>& Objects::object() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cod_pb.Objects.object)
  return _internal_object();
}
inline const ::google::protobuf::RepeatedPtrField<::cod_pb::Object>&
Objects::_internal_object() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.object_;
}
inline ::google::protobuf::RepeatedPtrField<::cod_pb::Object>*
Objects::_internal_mutable_object() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.object_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace cod_pb


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cod_2eproto_2epb_2eh
